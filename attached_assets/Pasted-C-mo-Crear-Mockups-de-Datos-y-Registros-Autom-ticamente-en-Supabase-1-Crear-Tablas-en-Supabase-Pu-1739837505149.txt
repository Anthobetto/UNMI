Cómo Crear Mockups de Datos y Registros Automáticamente en Supabase
1. Crear Tablas en Supabase
Puedes crear tablas directamente desde la interfaz de Supabase o mediante su API. Aquí te muestro cómo hacerlo con la API:

javascript
Copy
const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// Crear una tabla de llamadas
async function createCallsTable() {
  const { data, error } = await supabase
    .from('calls')
    .insert([
      {
        caller: '+123456789',
        message: 'Llamada de prueba 1',
        timestamp: new Date().toISOString(),
      },
      {
        caller: '+987654321',
        message: 'Llamada de prueba 2',
        timestamp: new Date().toISOString(),
      },
    ]);

  if (error) {
    console.error('Error creando tabla de llamadas:', error);
  } else {
    console.log('Tabla de llamadas creada con datos mock:', data);
  }
}

createCallsTable();
2. Insertar Datos de Mockup
Una vez que la tabla esté creada, puedes insertar datos de prueba (mockups) automáticamente usando la API de Supabase:

javascript
Copy
// Insertar datos mock en la tabla de llamadas
async function insertMockData() {
  const { data, error } = await supabase
    .from('calls')
    .insert([
      { caller: '+111111111', message: 'Llamada mock 1', timestamp: new Date() },
      { caller: '+222222222', message: 'Llamada mock 2', timestamp: new Date() },
      { caller: '+333333333', message: 'Llamada mock 3', timestamp: new Date() },
    ]);

  if (error) {
    console.error('Error insertando datos mock:', error);
  } else {
    console.log('Datos mock insertados:', data);
  }
}

insertMockData();
3. Crear Registros de Usuarios (Login/Registration)
Para el sistema de login/registro, puedes usar Supabase Auth, que permite crear usuarios automáticamente:

javascript
Copy
// Registrar un nuevo usuario
async function registerUser(email, password) {
  const { user, error } = await supabase.auth.signUp({ email, password });

  if (error) {
    console.error('Error registrando usuario:', error);
  } else {
    console.log('Usuario registrado:', user);
  }
}

// Llamar a la función para registrar un usuario mock
registerUser('test@example.com', 'password123');
4. Automatizar la Creación de Mockups
Puedes crear un script que se ejecute al iniciar tu aplicación para asegurarte de que los datos mock estén siempre disponibles:

javascript
Copy
// Script de inicialización
async function initializeMockData() {
  // Crear tabla de llamadas si no existe
  await createCallsTable();

  // Insertar datos mock
  await insertMockData();

  // Registrar usuarios mock
  await registerUser('user1@example.com', 'password123');
  await registerUser('user2@example.com', 'password123');
}

initializeMockData();
Replit AI Prompt para Automatizar Mockups en Supabase
markdown
Copy
"Configura un sistema en Replit AI que utilice la API de Supabase para crear automáticamente mockups de datos y registros. Sigue estos pasos:

1. **Inicializar Supabase:**
   - Configura el cliente de Supabase con las variables de entorno:
     ```javascript
     const { createClient } = require('@supabase/supabase-js');
     const supabase = createClient(
       process.env.SUPABASE_URL,
       process.env.SUPABASE_KEY
     );
     ```

2. **Crear Tablas y Datos Mock:**
   - Crea una tabla de llamadas e inserta datos mock:
     ```javascript
     async function createMockData() {
       const { data, error } = await supabase
         .from('calls')
         .insert([
           { caller: '+123456789', message: 'Llamada mock 1', timestamp: new Date() },
           { caller: '+987654321', message: 'Llamada mock 2', timestamp: new Date() },
         ]);

       if (error) {
         console.error('Error creando datos mock:', error);
       } else {
         console.log('Datos mock creados:', data);
       }
     }
     createMockData();
     ```

3. **Registrar Usuarios Mock:**
   - Usa Supabase Auth para registrar usuarios de prueba:
     ```javascript
     async function registerMockUsers() {
       const users = [
         { email: 'user1@example.com', password: 'password123' },
         { email: 'user2@example.com', password: 'password123' },
       ];

       for (const user of users) {
         const { user: createdUser, error } = await supabase.auth.signUp(user);
         if (error) {
           console.error('Error registrando usuario:', error);
         } else {
           console.log('Usuario registrado:', createdUser);
         }
       }
     }
     registerMockUsers();
     ```

4. **Automatizar el Proceso:**
   - Ejecuta el script de inicialización al iniciar la aplicación:
     ```javascript
     async function initializeApp() {
       await createMockData();
       await registerMockUsers();
       console.log('Aplicación inicializada con datos mock.');
     }
     initializeApp();
     ```

5. **Verificar en Supabase:**
   - Revisa la interfaz de Supabase para confirmar que las tablas y datos mock se han creado correctamente.
Ventajas de Este Enfoque
Automatización: Los datos mock se crean automáticamente al iniciar la aplicación.

Consistencia: Siempre tendrás datos de prueba disponibles para desarrollo y pruebas.

Flexibilidad: Puedes modificar los datos mock fácilmente cambiando el script.